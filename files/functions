#!/bin/zsh
join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}

# Git
cg () {
    is-git-repo || echo 'Not in git repo'
    cd $(git rev-parse --show-toplevel)
}

is-git-repo() {
    git rev-parse HEAD > /dev/null 2>&1
}

git-branch-names() {
    git branch --all --color=always --sort=-committerdate | grep -v HEAD | sed 's/^..//' | sed 's,remotes/,,' | cut -d' ' -f1
}

gpush() {
    is-git-repo || echo 'Not in git repo'

    cur_branch=$(git branch --show-current)
    has_remote=$(git branch -r --list "origin/$cur_branch")
    if [[ $has_remote ]]; then
        git push "$@"
    else
        echo "No remote branch found, creating one"
        git push --set-upstream origin "$cur_branch" "$@"
    fi
}

# FZF
zle -N ctrl-t-widget
ctrl-t-widget() {
    local result=''
    # If the current command is 'git add ', 'git restore ', or 'git checkout ' fuzzy find changed files
    if [[ $LBUFFER =~ '^git (add|restore|checkout) ' ]]; then
        result=$(fzf-git-changed | join-lines)
    # Find only '.spec' files
    elif [[ $LBUFFER =~ '^(yarn|pnpm) test ' ]]; then
        result=$(fzf-js-test | join-lines)
    # Otherwise do default and fuzzy search all files
    else
        result=$(eval $FZF_CTRL_T_COMMAND | eval "fzf $FZF_CTRL_T_OPTS")
    fi
    zle reset-prompt
    LBUFFER+=$result
}
bindkey '' ctrl-t-widget

fzf-js-test() {
    local cmd="rg -n -m 1 'describe' --glob '*.spec.ts' --line-number --no-heading"
    eval "$cmd" |
    fzf \
        --multi \
        --height 100% \
        --delimiter : \
        --nth 1 \
        --header 'ctrl-f: All files / ctrl-g Test files' \
        --bind "ctrl-f:change-prompt(Files> )+reload($FZF_CTRL_T_COMMAND)" \
        --bind "ctrl-g:change-prompt(Test Files> )+reload($cmd)" \
        --prompt "Test Files> " \
        --preview "bat --color=always --line-range=:40 --style=plain --highlight-line={2} {1}"
}

fzf-git-checkout() {
    is-git-repo || echo 'Not in git repo'

    # pass args straight to git-checkout if provided
    arg=$1
    if [[ -n $arg ]]; then
        git checkout "$@"
        return
    fi

    git-branch-names |
    fzf \
        --ansi \
        --header "Enter (checkout) / Ctrl-a (checkout -b) / Ctrl-t (checkout --track)" \
        --bind "enter:execute(git checkout {..})+accept" \
        --bind "ctrl-a:execute(git checkout -b {q})+accept" \
        --bind "ctrl-t:execute(git checkout --track {..})+accept" \
        --prompt "Braches> " \
        --preview-window 'right:50%' \
        --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" {}'
}

zle -N git-commit-widget
fzf-git-commits() {
    is-git-repo || echo 'Not in git repo'

    cmd="git log --date-order --abbrev-commit --oneline --decorate --color=always"
    eval "$cmd" |
    fzf \
        --ansi \
        --multi \
        --height '70%' \
        --prompt "Commits> " \
        --preview-window 'down,70%' \
        --preview 'git show --color=always --format=short --stat -p {1} | fzf-delta' |
    cut -d' ' -f1
}
git-commit-widget() {
    result=$(fzf-git-commits | join-lines)
    zle reset-prompt
    LBUFFER+=$result
}
bindkey '' git-commit-widget

zle -N git-branch-widget
fzf-git-branch() {
    is-git-repo || echo 'Not in git repo'

    git-branch-names |
    fzf \
        --ansi \
        --multi \
        --prompt "Braches> " \
        --preview-window 'right,50%' \
        --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" {}'
}
git-branch-widget() {
    result=$(fzf-git-branch | join-lines)
    zle reset-prompt
    LBUFFER+=$result
}
bindkey '' git-branch-widget

fzf-git-changed() {
    is-git-repo || echo 'Not in git repo'
    cmd="git -c color.status=always status --short"

    eval "$cmd" |
    fzf \
        --multi \
        --height '70%' \
        --ansi \
        --header 'ctrl-f: All files / ctrl-g: Changed files' \
        --bind "ctrl-f:change-prompt(Files> )+reload($FZF_CTRL_T_COMMAND)" \
        --bind "ctrl-g:change-prompt(Changed Files> )+reload($cmd)" \
        --prompt "Changed Files> " \
        --preview-window 'right,70%' \
        --preview 'delta-git-diff {..}' |
    sed 's/.* //'
}

zle -N fzf-ls-widget
fzf-ls() {
    fd -tf |
    fzf \
        --ansi \
        --multi \
        --header "ctrl-d: Directories / ctrl-f: Files" \
        --bind "ctrl-d:change-prompt(Directories> )+reload(fd -td)" \
        --bind "ctrl-f:change-prompt(Files> )+reload(fd -tf)" \
        --prompt "Files> "
}
fzf-ls-widget() {
    result=$(fzf-ls | join-lines)
    zle reset-prompt
    LBUFFER+=$result
}
bindkey '' fzf-ls-widget

fzf-cd() {
    fd -td -H -E '*.git' |
    fzf \
        --ansi \
        --no-multi \
        --preview='exa -hal {..}' \
        --prompt "Directories> "
}

# Others
source-envfile() {
    set -a
    source "$1"
    set +a
}

